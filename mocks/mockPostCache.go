// Code generated by MockGen. DO NOT EDIT.
// Source: internal/post/cache/cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostCache is a mock of PostCache interface
type MockPostCache struct {
	ctrl     *gomock.Controller
	recorder *MockPostCacheMockRecorder
}

// MockPostCacheMockRecorder is the mock recorder for MockPostCache
type MockPostCacheMockRecorder struct {
	mock *MockPostCache
}

// NewMockPostCache creates a new mock instance
func NewMockPostCache(ctrl *gomock.Controller) *MockPostCache {
	mock := &MockPostCache{ctrl: ctrl}
	mock.recorder = &MockPostCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostCache) EXPECT() *MockPostCacheMockRecorder {
	return m.recorder
}

// GetPostsByKey mocks base method
func (m *MockPostCache) GetPostsByKey(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByKey", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByKey indicates an expected call of GetPostsByKey
func (mr *MockPostCacheMockRecorder) GetPostsByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByKey", reflect.TypeOf((*MockPostCache)(nil).GetPostsByKey), key)
}

// InsertPost mocks base method
func (m *MockPostCache) InsertPost(key, post string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPost", key, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPost indicates an expected call of InsertPost
func (mr *MockPostCacheMockRecorder) InsertPost(key, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPost", reflect.TypeOf((*MockPostCache)(nil).InsertPost), key, post)
}
