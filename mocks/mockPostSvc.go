// Code generated by MockGen. DO NOT EDIT.
// Source: internal/post/post.go

// Package mock_post is a generated GoMock package.
package mocks

import (
	model "github.com/PostService/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// InsertPost mocks base method
func (m *MockService) InsertPost(post model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPost indicates an expected call of InsertPost
func (mr *MockServiceMockRecorder) InsertPost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPost", reflect.TypeOf((*MockService)(nil).InsertPost), post)
}

// GetPostsByKey mocks base method
func (m *MockService) GetPostsByKey(key string) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByKey", key)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByKey indicates an expected call of GetPostsByKey
func (mr *MockServiceMockRecorder) GetPostsByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByKey", reflect.TypeOf((*MockService)(nil).GetPostsByKey), key)
}

// GetPostsByNameAndAuthor mocks base method
func (m *MockService) GetPostsByNameAndAuthor(name, author string) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByNameAndAuthor", name, author)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByNameAndAuthor indicates an expected call of GetPostsByNameAndAuthor
func (mr *MockServiceMockRecorder) GetPostsByNameAndAuthor(name, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByNameAndAuthor", reflect.TypeOf((*MockService)(nil).GetPostsByNameAndAuthor), name, author)
}
